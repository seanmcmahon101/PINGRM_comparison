import pandas as pd
from datetime import datetime
import os
from openpyxl import load_workbook, Workbook
import tkinter as tk
from tkinter import filedialog

def select_file():
    """Opens a file dialog to select a file and returns the file path."""
    root = tk.Tk()
    root.withdraw()  # Hide the main window
    file_path = filedialog.askopenfilename(filetypes=[("Excel files", "*.xlsx *.csv")])
    return file_path

def trim_and_filter_sheet():
    """For PINGRM schedule files, trims and filters the data."""
    pingrm_file = select_file()
    if not pingrm_file:
        print("File selection cancelled.")
        return

    print(f"Selected file: {pingrm_file}")
    file_extension = os.path.splitext(pingrm_file)[1]
    print(f"File extension: {file_extension}")

    if file_extension.lower() == '.csv':
        df = pd.read_csv(pingrm_file, sep=';', header=None, dtype=str, skiprows=1)
    elif file_extension.lower() == '.xlsx':
        df = pd.read_excel(pingrm_file)
    else:
        print("Unsupported file format: Please select a CSV or Excel file.")
        return

    print("Original DataFrame:")
    print(df.head())

    if file_extension.lower() == '.csv':
        df.replace(';;', ';', regex=True, inplace=True)
        print("DataFrame after replacing double semicolons:")
        print(df.head())

    processed_data = []

    for index, row in df.iterrows():
        print(f"Processing row {index + 1}")

        item_number = ""
        term_date = ""
        order_quantity = ""
        reference = ""
        year_week = ""

        for value in row:
            if pd.notna(value):
                if len(str(value)) == 10 and str(value).startswith('4'):
                    item_number = str(value)
                elif pd.to_datetime(value, errors='coerce') is not pd.NaT and term_date == "":
                    term_date = pd.to_datetime(value).strftime('%d-%m-%Y')
                    year_week = f"{pd.to_datetime(value).year}-{pd.to_datetime(value).isocalendar().week:02d}"
                elif str(value).isnumeric() and order_quantity == "" and term_date != "":
                    order_quantity = str(value)
                elif (len(str(value)) == 8 and str(value).startswith('3')) or str(value) == "forecast":
                    reference = str(value)

        print(f"Parsed data: Item Number: {item_number}, Term Date: {term_date}, Order Quantity: {order_quantity}, Reference: {reference}, Year Week: {year_week}")

        processed_data.append({
            'Item Number': item_number,
            'Term Date': term_date,
            'Order Quantity': order_quantity,
            'Reference': reference,
            'Year Week': year_week
        })

    processed_df = pd.DataFrame(processed_data)
    print("Processed DataFrame:")
    print(processed_df.head())

    output_file = 'output.xlsx'
    if os.path.exists(output_file):
        excel_file = load_workbook(output_file)
    else:
        excel_file = Workbook()
        excel_file.remove(excel_file.active)
    ws = excel_file.create_sheet("Processed Data")
    for r_idx, row in enumerate(processed_data, 1):
        for c_idx, (key, value) in enumerate(row.items(), 1):
            ws.cell(row=r_idx, column=c_idx, value=value)
            ws.cell(row=1, column=c_idx, value=key)
    excel_file.save(output_file)
    print(f"Data written to {output_file}")

# To run the function, just call trim_and_filter_sheet()
trim_and_filter_sheet()
